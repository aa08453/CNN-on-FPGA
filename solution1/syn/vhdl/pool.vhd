-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_V_AWVALID : OUT STD_LOGIC;
    m_axi_input_V_AWREADY : IN STD_LOGIC;
    m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WVALID : OUT STD_LOGIC;
    m_axi_input_V_WREADY : IN STD_LOGIC;
    m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WLAST : OUT STD_LOGIC;
    m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_ARVALID : OUT STD_LOGIC;
    m_axi_input_V_ARREADY : IN STD_LOGIC;
    m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RVALID : IN STD_LOGIC;
    m_axi_input_V_RREADY : OUT STD_LOGIC;
    m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_V_RLAST : IN STD_LOGIC;
    m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_BVALID : IN STD_LOGIC;
    m_axi_input_V_BREADY : OUT STD_LOGIC;
    m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    outputPool_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    Cin : IN STD_LOGIC_VECTOR (5 downto 0);
    H : IN STD_LOGIC_VECTOR (5 downto 0);
    W : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal input_V_blk_n_AW : STD_LOGIC;
    signal input_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal input_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal Hout_fu_275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal Hout_reg_669 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln15_fu_281_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln15_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal Wout_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal Wout_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln12_fu_311_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln12_reg_684 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_fu_315_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_reg_689 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_1_fu_319_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_1_reg_694 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln17_fu_323_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln17_reg_700 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln14_fu_327_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln14_reg_705 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln15_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_reg_716 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_reg_724 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln15_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln15_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln14_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln17_fu_397_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln17_reg_742 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln15_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln32_fu_411_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln32_reg_747 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln27_fu_426_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln27_reg_752 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_fu_440_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_760 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln17_1_fu_458_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln17_1_reg_765 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln16_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputPool_V_addr_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_2_fu_482_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_2_reg_777 : STD_LOGIC_VECTOR (13 downto 0);
    signal outputPool_V_addr26_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_511_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_reg_790 : STD_LOGIC_VECTOR (13 downto 0);
    signal outputPool_V_addr_1_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_V_reg_801 : STD_LOGIC_VECTOR (7 downto 0);
    signal outputPool_V_addr_1_s_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_fu_539_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln28_reg_811 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal outputPool_V_addr_2_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputPool_V_addr_3_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_V_1_reg_828 : STD_LOGIC_VECTOR (7 downto 0);
    signal outputPool_V_addr_3_s_reg_833 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_1_fu_586_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln28_1_reg_838 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal outputPool_V_addr_4_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_3_fu_611_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_3_reg_849 : STD_LOGIC_VECTOR (13 downto 0);
    signal outputPool_V_addr_5_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_V_2_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal outputPool_V_addr_5_s_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal outputPool_V_addr_6_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal max_V_3_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_0_reg_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_221 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_0_reg_233 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_reg_244 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln17_1_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_1_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_2_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_3_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_4_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1494_5_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln11_fu_255_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln11_1_fu_265_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln12_fu_285_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln12_1_fu_295_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln14_fu_340_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln15_fu_355_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln15_fu_355_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_375_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln17_2_fu_383_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_h_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln17_fu_397_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln17_fu_397_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln15_2_fu_360_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_fu_411_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln32_fu_411_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_1_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln27_fu_426_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln27_fu_426_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln17_1_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln17_4_fu_454_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_5_fu_463_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln17_2_fu_467_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln16_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal outIdx_fu_487_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_fu_492_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln203_fu_496_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1494_fu_516_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1494_fu_520_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1494_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1494_1_fu_545_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1494_1_fu_549_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1494_2_fu_564_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1494_2_fu_567_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1494_1_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1494_3_fu_592_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1494_3_fu_596_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln1494_4_fu_616_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1494_4_fu_620_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln1494_2_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_2_fu_639_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1494_5_fu_645_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln1494_5_fu_649_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln15_fu_355_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln17_fu_397_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln27_fu_426_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln32_fu_411_p00 : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                co_0_reg_210 <= co_reg_724;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                co_0_reg_210 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_0_reg_233 <= h_reg_737;
            elsif (((icmp_ln14_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_0_reg_233 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_221 <= add_ln15_reg_716;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_221 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    w_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                w_0_reg_244 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_input_V_BVALID = ap_const_logic_1))) then 
                w_0_reg_244 <= w_reg_760;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Hout_reg_669 <= Hout_fu_275_p2;
                Wout_reg_679 <= Wout_fu_305_p2;
                sext_ln14_reg_705 <= sext_ln14_fu_327_p1;
                sext_ln17_reg_700 <= sext_ln17_fu_323_p1;
                    zext_ln12_reg_684(3 downto 0) <= zext_ln12_fu_311_p1(3 downto 0);
                    zext_ln15_reg_674(3 downto 0) <= zext_ln15_fu_281_p1(3 downto 0);
                    zext_ln17_1_reg_694(5 downto 0) <= zext_ln17_1_fu_319_p1(5 downto 0);
                    zext_ln17_reg_689(5 downto 0) <= zext_ln17_fu_315_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln15_reg_716 <= add_ln15_fu_331_p2;
                co_reg_724 <= co_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln17_1_reg_765 <= add_ln17_1_fu_458_p2;
                add_ln27_2_reg_777 <= add_ln27_2_fu_482_p2;
                outputPool_V_addr26_reg_784 <= sext_ln203_fu_501_p1(32 - 1 downto 0);
                outputPool_V_addr_reg_771 <= sext_ln17_1_fu_472_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                add_ln27_3_reg_849 <= add_ln27_3_fu_611_p2;
                outputPool_V_addr_5_reg_854 <= sext_ln1494_4_fu_625_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln27_reg_790 <= add_ln27_fu_511_p2;
                outputPool_V_addr_1_reg_795 <= sext_ln1494_fu_525_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_reg_737 <= h_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                max_V_1_reg_828 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                max_V_2_reg_860 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                max_V_3_reg_876 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_input_V_AWREADY = ap_const_logic_0) or (m_axi_input_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                max_V_reg_801 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln15_reg_729 <= mul_ln15_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                mul_ln17_reg_742 <= mul_ln17_fu_397_p2;
                mul_ln27_reg_752 <= mul_ln27_fu_426_p2;
                mul_ln32_reg_747 <= mul_ln32_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                outputPool_V_addr_1_s_reg_806 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                outputPool_V_addr_2_reg_816 <= sext_ln1494_1_fu_554_p1(32 - 1 downto 0);
                select_ln28_reg_811 <= select_ln28_fu_539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                outputPool_V_addr_3_reg_822 <= sext_ln1494_2_fu_572_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                outputPool_V_addr_3_s_reg_833 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                outputPool_V_addr_4_reg_843 <= sext_ln1494_3_fu_601_p1(32 - 1 downto 0);
                select_ln28_1_reg_838 <= select_ln28_1_fu_586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                outputPool_V_addr_5_s_reg_865 <= m_axi_input_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                outputPool_V_addr_6_reg_870 <= sext_ln1494_5_fu_654_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_reg_760 <= w_fu_440_p2;
            end if;
        end if;
    end process;
    zext_ln15_reg_674(7 downto 4) <= "0000";
    zext_ln12_reg_684(11 downto 4) <= "00000000";
    zext_ln17_reg_689(8 downto 6) <= "000";
    zext_ln17_1_reg_694(13 downto 6) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_input_V_AWREADY, m_axi_input_V_WREADY, m_axi_input_V_ARREADY, m_axi_input_V_RVALID, m_axi_input_V_BVALID, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state32, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state2, icmp_ln14_fu_344_p2, ap_CS_fsm_state3, icmp_ln15_fu_364_p2, ap_CS_fsm_state4, icmp_ln16_fu_435_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln14_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln15_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln16_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((m_axi_input_V_AWREADY = ap_const_logic_0) or (m_axi_input_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (m_axi_input_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((m_axi_input_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_input_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hout_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(trunc_ln11_1_fu_265_p4));
    Wout_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(trunc_ln12_1_fu_295_p4));
    add_ln11_fu_259_p2 <= std_logic_vector(signed(ap_const_lv5_1E) + signed(trunc_ln11_fu_255_p1));
    add_ln12_fu_289_p2 <= std_logic_vector(signed(ap_const_lv5_1E) + signed(trunc_ln12_fu_285_p1));
    add_ln1494_1_fu_549_p2 <= std_logic_vector(unsigned(zext_ln1494_1_fu_545_p1) + unsigned(sext_ln14_reg_705));
    add_ln1494_2_fu_567_p2 <= std_logic_vector(unsigned(zext_ln1494_2_fu_564_p1) + unsigned(sext_ln14_reg_705));
    add_ln1494_3_fu_596_p2 <= std_logic_vector(unsigned(zext_ln1494_3_fu_592_p1) + unsigned(sext_ln14_reg_705));
    add_ln1494_4_fu_620_p2 <= std_logic_vector(unsigned(zext_ln1494_4_fu_616_p1) + unsigned(sext_ln14_reg_705));
    add_ln1494_5_fu_649_p2 <= std_logic_vector(unsigned(zext_ln1494_5_fu_645_p1) + unsigned(sext_ln14_reg_705));
    add_ln1494_fu_520_p2 <= std_logic_vector(unsigned(zext_ln1494_fu_516_p1) + unsigned(sext_ln14_reg_705));
    add_ln15_fu_331_p2 <= std_logic_vector(unsigned(phi_mul_reg_221) + unsigned(zext_ln17_reg_689));
    add_ln17_1_fu_458_p2 <= std_logic_vector(unsigned(zext_ln17_4_fu_454_p1) + unsigned(mul_ln17_reg_742));
    add_ln17_2_fu_467_p2 <= std_logic_vector(unsigned(zext_ln17_5_fu_463_p1) + unsigned(sext_ln14_reg_705));
    add_ln203_fu_496_p2 <= std_logic_vector(unsigned(zext_ln203_fu_492_p1) + unsigned(sext_ln17_reg_700));
    add_ln27_1_fu_416_p2 <= std_logic_vector(unsigned(in_h_fu_387_p2) + unsigned(ap_const_lv9_1));
    add_ln27_2_fu_482_p2 <= std_logic_vector(unsigned(mul_ln27_reg_752) + unsigned(zext_ln17_4_fu_454_p1));
    add_ln27_3_fu_611_p2 <= std_logic_vector(unsigned(add_ln27_2_reg_777) + unsigned(ap_const_lv14_1));
    add_ln27_fu_511_p2 <= std_logic_vector(unsigned(add_ln17_1_reg_765) + unsigned(ap_const_lv14_1));
    add_ln32_fu_402_p2 <= std_logic_vector(unsigned(zext_ln15_2_fu_360_p1) + unsigned(mul_ln15_reg_729));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln14_fu_344_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln14_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln14_fu_344_p2)
    begin
        if (((icmp_ln14_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    co_fu_349_p2 <= std_logic_vector(unsigned(co_0_reg_210) + unsigned(ap_const_lv5_1));
    h_fu_369_p2 <= std_logic_vector(unsigned(h_0_reg_233) + unsigned(ap_const_lv4_1));
    icmp_ln1494_1_fu_582_p2 <= "1" when (signed(outputPool_V_addr_3_s_reg_833) > signed(max_V_1_reg_828)) else "0";
    icmp_ln1494_2_fu_635_p2 <= "1" when (signed(outputPool_V_addr_5_s_reg_865) > signed(max_V_2_reg_860)) else "0";
    icmp_ln1494_fu_535_p2 <= "1" when (signed(outputPool_V_addr_1_s_reg_806) > signed(max_V_reg_801)) else "0";
    icmp_ln14_fu_344_p2 <= "1" when (signed(zext_ln14_fu_340_p1) < signed(Cin)) else "0";
    icmp_ln15_fu_364_p2 <= "1" when (h_0_reg_233 = Hout_reg_669) else "0";
    icmp_ln16_fu_435_p2 <= "1" when (w_0_reg_244 = Wout_reg_679) else "0";
    in_h_fu_387_p2 <= std_logic_vector(unsigned(zext_ln17_2_fu_383_p1) + unsigned(phi_mul_reg_221));

    input_V_blk_n_AR_assign_proc : process(m_axi_input_V_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_V_blk_n_AR <= m_axi_input_V_ARREADY;
        else 
            input_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_V_blk_n_AW_assign_proc : process(m_axi_input_V_AWREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_V_blk_n_AW <= m_axi_input_V_AWREADY;
        else 
            input_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    input_V_blk_n_B_assign_proc : process(m_axi_input_V_BVALID, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            input_V_blk_n_B <= m_axi_input_V_BVALID;
        else 
            input_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    input_V_blk_n_R_assign_proc : process(m_axi_input_V_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            input_V_blk_n_R <= m_axi_input_V_RVALID;
        else 
            input_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    input_V_blk_n_W_assign_proc : process(m_axi_input_V_WREADY, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            input_V_blk_n_W <= m_axi_input_V_WREADY;
        else 
            input_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    m_axi_input_V_ARADDR_assign_proc : process(m_axi_input_V_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state35, outputPool_V_addr_reg_771, outputPool_V_addr_1_reg_795, outputPool_V_addr_2_reg_816, outputPool_V_addr_3_reg_822, outputPool_V_addr_4_reg_843, outputPool_V_addr_5_reg_854, outputPool_V_addr_6_reg_870)
    begin
        if ((m_axi_input_V_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_6_reg_870;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_5_reg_854;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_4_reg_843;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_3_reg_822;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_2_reg_816;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_1_reg_795;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_axi_input_V_ARADDR <= outputPool_V_addr_reg_771;
            else 
                m_axi_input_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_input_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_input_V_ARBURST <= ap_const_lv2_0;
    m_axi_input_V_ARCACHE <= ap_const_lv4_0;
    m_axi_input_V_ARID <= ap_const_lv1_0;
    m_axi_input_V_ARLEN <= ap_const_lv32_1;
    m_axi_input_V_ARLOCK <= ap_const_lv2_0;
    m_axi_input_V_ARPROT <= ap_const_lv3_0;
    m_axi_input_V_ARQOS <= ap_const_lv4_0;
    m_axi_input_V_ARREGION <= ap_const_lv4_0;
    m_axi_input_V_ARSIZE <= ap_const_lv3_0;
    m_axi_input_V_ARUSER <= ap_const_lv1_0;

    m_axi_input_V_ARVALID_assign_proc : process(m_axi_input_V_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if ((((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_input_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            m_axi_input_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_V_AWADDR <= outputPool_V_addr26_reg_784;
    m_axi_input_V_AWBURST <= ap_const_lv2_0;
    m_axi_input_V_AWCACHE <= ap_const_lv4_0;
    m_axi_input_V_AWID <= ap_const_lv1_0;
    m_axi_input_V_AWLEN <= ap_const_lv32_1;
    m_axi_input_V_AWLOCK <= ap_const_lv2_0;
    m_axi_input_V_AWPROT <= ap_const_lv3_0;
    m_axi_input_V_AWQOS <= ap_const_lv4_0;
    m_axi_input_V_AWREGION <= ap_const_lv4_0;
    m_axi_input_V_AWSIZE <= ap_const_lv3_0;
    m_axi_input_V_AWUSER <= ap_const_lv1_0;

    m_axi_input_V_AWVALID_assign_proc : process(m_axi_input_V_AWREADY, m_axi_input_V_RVALID, ap_CS_fsm_state12)
    begin
        if ((not(((m_axi_input_V_AWREADY = ap_const_logic_0) or (m_axi_input_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_input_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_input_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_input_V_BREADY_assign_proc : process(m_axi_input_V_BVALID, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) and (m_axi_input_V_BVALID = ap_const_logic_1))) then 
            m_axi_input_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_input_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_input_V_RREADY_assign_proc : process(m_axi_input_V_AWREADY, m_axi_input_V_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state42)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state42) and (m_axi_input_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (m_axi_input_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (m_axi_input_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (m_axi_input_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_input_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_input_V_RVALID = ap_const_logic_1)) or (not(((m_axi_input_V_AWREADY = ap_const_logic_0) or (m_axi_input_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            m_axi_input_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_input_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_V_WDATA <= max_V_3_reg_876;
    m_axi_input_V_WID <= ap_const_lv1_0;
    m_axi_input_V_WLAST <= ap_const_logic_0;
    m_axi_input_V_WSTRB <= ap_const_lv1_1;
    m_axi_input_V_WUSER <= ap_const_lv1_0;

    m_axi_input_V_WVALID_assign_proc : process(m_axi_input_V_WREADY, ap_CS_fsm_state43)
    begin
        if (((m_axi_input_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            m_axi_input_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_input_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln15_fu_355_p0 <= zext_ln15_reg_674(4 - 1 downto 0);
    mul_ln15_fu_355_p1 <= mul_ln15_fu_355_p10(5 - 1 downto 0);
    mul_ln15_fu_355_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_0_reg_210),8));
    mul_ln15_fu_355_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_fu_355_p0) * unsigned(mul_ln15_fu_355_p1), 8));
    mul_ln17_fu_397_p0 <= mul_ln17_fu_397_p00(9 - 1 downto 0);
    mul_ln17_fu_397_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_h_fu_387_p2),14));
    mul_ln17_fu_397_p1 <= zext_ln17_1_reg_694(6 - 1 downto 0);
    mul_ln17_fu_397_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln17_fu_397_p0) * unsigned(mul_ln17_fu_397_p1), 14));
    mul_ln27_fu_426_p0 <= mul_ln27_fu_426_p00(9 - 1 downto 0);
    mul_ln27_fu_426_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_416_p2),14));
    mul_ln27_fu_426_p1 <= zext_ln17_1_reg_694(6 - 1 downto 0);
    mul_ln27_fu_426_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln27_fu_426_p0) * unsigned(mul_ln27_fu_426_p1), 14));
    mul_ln32_fu_411_p0 <= mul_ln32_fu_411_p00(8 - 1 downto 0);
    mul_ln32_fu_411_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_402_p2),12));
    mul_ln32_fu_411_p1 <= zext_ln12_reg_684(4 - 1 downto 0);
    mul_ln32_fu_411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln32_fu_411_p0) * unsigned(mul_ln32_fu_411_p1), 12));
    outIdx_fu_487_p2 <= std_logic_vector(unsigned(zext_ln16_fu_431_p1) + unsigned(mul_ln32_reg_747));
    select_ln28_1_fu_586_p3 <= 
        add_ln27_2_reg_777 when (icmp_ln1494_1_fu_582_p2(0) = '1') else 
        select_ln28_reg_811;
    select_ln28_2_fu_639_p3 <= 
        add_ln27_3_reg_849 when (icmp_ln1494_2_fu_635_p2(0) = '1') else 
        select_ln28_1_reg_838;
    select_ln28_fu_539_p3 <= 
        add_ln27_reg_790 when (icmp_ln1494_fu_535_p2(0) = '1') else 
        add_ln17_1_reg_765;
        sext_ln1494_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_1_fu_549_p2),64));

        sext_ln1494_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_2_fu_567_p2),64));

        sext_ln1494_3_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_3_fu_596_p2),64));

        sext_ln1494_4_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_4_fu_620_p2),64));

        sext_ln1494_5_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_5_fu_649_p2),64));

        sext_ln1494_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1494_fu_520_p2),64));

        sext_ln14_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_V_offset),33));

        sext_ln17_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln17_2_fu_467_p2),64));

        sext_ln17_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outputPool_V_offset),33));

        sext_ln203_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_496_p2),64));

    shl_ln17_1_fu_446_p3 <= (w_0_reg_244 & ap_const_lv1_0);
    shl_ln_fu_375_p3 <= (h_0_reg_233 & ap_const_lv1_0);
    trunc_ln11_1_fu_265_p4 <= add_ln11_fu_259_p2(4 downto 1);
    trunc_ln11_fu_255_p1 <= H(5 - 1 downto 0);
    trunc_ln12_1_fu_295_p4 <= add_ln12_fu_289_p2(4 downto 1);
    trunc_ln12_fu_285_p1 <= W(5 - 1 downto 0);
    w_fu_440_p2 <= std_logic_vector(unsigned(w_0_reg_244) + unsigned(ap_const_lv4_1));
    zext_ln12_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_fu_305_p2),12));
    zext_ln1494_1_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_fu_539_p3),33));
    zext_ln1494_2_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_reg_777),33));
    zext_ln1494_3_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_586_p3),33));
    zext_ln1494_4_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_fu_611_p2),33));
    zext_ln1494_5_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_2_fu_639_p3),33));
    zext_ln1494_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_511_p2),33));
    zext_ln14_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_0_reg_210),6));
    zext_ln15_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_0_reg_233),8));
    zext_ln15_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hout_fu_275_p2),8));
    zext_ln16_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_0_reg_244),12));
    zext_ln17_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W),14));
    zext_ln17_2_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_375_p3),9));
    zext_ln17_4_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln17_1_fu_446_p3),14));
    zext_ln17_5_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_fu_458_p2),33));
    zext_ln17_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H),9));
    zext_ln203_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outIdx_fu_487_p2),33));
end behav;
