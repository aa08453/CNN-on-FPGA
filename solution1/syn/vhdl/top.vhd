-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=9679,HLS_SYN_LUT=34771,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V : STD_LOGIC_VECTOR (31 downto 0);
    signal outputConv_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_V : STD_LOGIC_VECTOR (31 downto 0);
    signal outputPool_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weight2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal outputConv2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal outputPool2_V : STD_LOGIC_VECTOR (31 downto 0);
    signal outputDense_V : STD_LOGIC_VECTOR (31 downto 0);
    signal fcWeight_V : STD_LOGIC_VECTOR (31 downto 0);
    signal fcBias_V : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal fcBias_V_read_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal fcWeight_V_read_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputDense_V_read_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputPool2_V_read_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputConv2_V_read_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias2_V_read_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight2_V_read_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputPool_V_read_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_V_read_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V_read_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputConv_V_read_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_V_read_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_188_ap_start : STD_LOGIC;
    signal grp_dense_fu_188_ap_done : STD_LOGIC;
    signal grp_dense_fu_188_ap_idle : STD_LOGIC;
    signal grp_dense_fu_188_ap_ready : STD_LOGIC;
    signal grp_dense_fu_188_m_axi_input_V_AWVALID : STD_LOGIC;
    signal grp_dense_fu_188_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_WVALID : STD_LOGIC;
    signal grp_dense_fu_188_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_WLAST : STD_LOGIC;
    signal grp_dense_fu_188_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARVALID : STD_LOGIC;
    signal grp_dense_fu_188_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_fu_188_m_axi_input_V_RREADY : STD_LOGIC;
    signal grp_dense_fu_188_m_axi_input_V_BREADY : STD_LOGIC;
    signal grp_conv2_fu_198_ap_start : STD_LOGIC;
    signal grp_conv2_fu_198_ap_done : STD_LOGIC;
    signal grp_conv2_fu_198_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_198_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_198_m_axi_input_V_AWVALID : STD_LOGIC;
    signal grp_conv2_fu_198_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_WVALID : STD_LOGIC;
    signal grp_conv2_fu_198_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_WLAST : STD_LOGIC;
    signal grp_conv2_fu_198_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARVALID : STD_LOGIC;
    signal grp_conv2_fu_198_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2_fu_198_m_axi_input_V_RREADY : STD_LOGIC;
    signal grp_conv2_fu_198_m_axi_input_V_BREADY : STD_LOGIC;
    signal grp_conv1_fu_208_ap_start : STD_LOGIC;
    signal grp_conv1_fu_208_ap_done : STD_LOGIC;
    signal grp_conv1_fu_208_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_208_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_208_m_axi_input_V_AWVALID : STD_LOGIC;
    signal grp_conv1_fu_208_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_WVALID : STD_LOGIC;
    signal grp_conv1_fu_208_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_WLAST : STD_LOGIC;
    signal grp_conv1_fu_208_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARVALID : STD_LOGIC;
    signal grp_conv1_fu_208_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv1_fu_208_m_axi_input_V_RREADY : STD_LOGIC;
    signal grp_conv1_fu_208_m_axi_input_V_BREADY : STD_LOGIC;
    signal grp_pool_fu_218_ap_start : STD_LOGIC;
    signal grp_pool_fu_218_ap_done : STD_LOGIC;
    signal grp_pool_fu_218_ap_idle : STD_LOGIC;
    signal grp_pool_fu_218_ap_ready : STD_LOGIC;
    signal grp_pool_fu_218_m_axi_input_V_AWVALID : STD_LOGIC;
    signal grp_pool_fu_218_m_axi_input_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_WVALID : STD_LOGIC;
    signal grp_pool_fu_218_m_axi_input_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_WLAST : STD_LOGIC;
    signal grp_pool_fu_218_m_axi_input_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARVALID : STD_LOGIC;
    signal grp_pool_fu_218_m_axi_input_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_218_m_axi_input_V_RREADY : STD_LOGIC;
    signal grp_pool_fu_218_m_axi_input_V_BREADY : STD_LOGIC;
    signal grp_pool_fu_218_input_V_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_218_outputPool_V_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_218_Cin : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pool_fu_218_H : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pool_fu_218_W : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dense_fu_188_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_conv2_fu_198_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_conv1_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_pool_fu_218_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component dense IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        outputDense_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        fcWeight_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        fcBias_V_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        outputConv_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_V_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        outputConv_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_V_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_V_AWVALID : OUT STD_LOGIC;
        m_axi_input_V_AWREADY : IN STD_LOGIC;
        m_axi_input_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WVALID : OUT STD_LOGIC;
        m_axi_input_V_WREADY : IN STD_LOGIC;
        m_axi_input_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WLAST : OUT STD_LOGIC;
        m_axi_input_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARVALID : OUT STD_LOGIC;
        m_axi_input_V_ARREADY : IN STD_LOGIC;
        m_axi_input_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RVALID : IN STD_LOGIC;
        m_axi_input_V_RREADY : OUT STD_LOGIC;
        m_axi_input_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_V_RLAST : IN STD_LOGIC;
        m_axi_input_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BVALID : IN STD_LOGIC;
        m_axi_input_V_BREADY : OUT STD_LOGIC;
        m_axi_input_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        outputPool_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        Cin : IN STD_LOGIC_VECTOR (5 downto 0);
        H : IN STD_LOGIC_VECTOR (5 downto 0);
        W : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component top_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputConv_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputPool_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputConv2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputPool2_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputDense_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        fcWeight_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        fcBias_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_control_s_axi_U : component top_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_V => input_V,
        outputConv_V => outputConv_V,
        weight_V => weight_V,
        bias_V => bias_V,
        outputPool_V => outputPool_V,
        weight2_V => weight2_V,
        bias2_V => bias2_V,
        outputConv2_V => outputConv2_V,
        outputPool2_V => outputPool2_V,
        outputDense_V => outputDense_V,
        fcWeight_V => fcWeight_V,
        fcBias_V => fcBias_V);

    top_gmem_m_axi_U : component top_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    grp_dense_fu_188 : component dense
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dense_fu_188_ap_start,
        ap_done => grp_dense_fu_188_ap_done,
        ap_idle => grp_dense_fu_188_ap_idle,
        ap_ready => grp_dense_fu_188_ap_ready,
        m_axi_input_V_AWVALID => grp_dense_fu_188_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => gmem_AWREADY,
        m_axi_input_V_AWADDR => grp_dense_fu_188_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => grp_dense_fu_188_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => grp_dense_fu_188_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => grp_dense_fu_188_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => grp_dense_fu_188_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => grp_dense_fu_188_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => grp_dense_fu_188_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => grp_dense_fu_188_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => grp_dense_fu_188_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => grp_dense_fu_188_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => grp_dense_fu_188_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => grp_dense_fu_188_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => gmem_WREADY,
        m_axi_input_V_WDATA => grp_dense_fu_188_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => grp_dense_fu_188_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => grp_dense_fu_188_m_axi_input_V_WLAST,
        m_axi_input_V_WID => grp_dense_fu_188_m_axi_input_V_WID,
        m_axi_input_V_WUSER => grp_dense_fu_188_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => grp_dense_fu_188_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => gmem_ARREADY,
        m_axi_input_V_ARADDR => grp_dense_fu_188_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => grp_dense_fu_188_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => grp_dense_fu_188_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => grp_dense_fu_188_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => grp_dense_fu_188_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => grp_dense_fu_188_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => grp_dense_fu_188_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => grp_dense_fu_188_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => grp_dense_fu_188_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => grp_dense_fu_188_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => grp_dense_fu_188_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => gmem_RVALID,
        m_axi_input_V_RREADY => grp_dense_fu_188_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => gmem_RDATA,
        m_axi_input_V_RLAST => gmem_RLAST,
        m_axi_input_V_RID => gmem_RID,
        m_axi_input_V_RUSER => gmem_RUSER,
        m_axi_input_V_RRESP => gmem_RRESP,
        m_axi_input_V_BVALID => gmem_BVALID,
        m_axi_input_V_BREADY => grp_dense_fu_188_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => gmem_BRESP,
        m_axi_input_V_BID => gmem_BID,
        m_axi_input_V_BUSER => gmem_BUSER,
        input_V_offset => outputPool2_V_read_reg_250,
        outputDense_V_offset => outputDense_V_read_reg_245,
        fcWeight_V_offset => fcWeight_V_read_reg_240,
        fcBias_V_offset => fcBias_V_read_reg_235);

    grp_conv2_fu_198 : component conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2_fu_198_ap_start,
        ap_done => grp_conv2_fu_198_ap_done,
        ap_idle => grp_conv2_fu_198_ap_idle,
        ap_ready => grp_conv2_fu_198_ap_ready,
        m_axi_input_V_AWVALID => grp_conv2_fu_198_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => gmem_AWREADY,
        m_axi_input_V_AWADDR => grp_conv2_fu_198_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => grp_conv2_fu_198_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => grp_conv2_fu_198_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => grp_conv2_fu_198_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => grp_conv2_fu_198_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => grp_conv2_fu_198_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => grp_conv2_fu_198_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => grp_conv2_fu_198_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => grp_conv2_fu_198_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => grp_conv2_fu_198_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => grp_conv2_fu_198_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => grp_conv2_fu_198_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => gmem_WREADY,
        m_axi_input_V_WDATA => grp_conv2_fu_198_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => grp_conv2_fu_198_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => grp_conv2_fu_198_m_axi_input_V_WLAST,
        m_axi_input_V_WID => grp_conv2_fu_198_m_axi_input_V_WID,
        m_axi_input_V_WUSER => grp_conv2_fu_198_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => grp_conv2_fu_198_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => gmem_ARREADY,
        m_axi_input_V_ARADDR => grp_conv2_fu_198_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => grp_conv2_fu_198_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => grp_conv2_fu_198_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => grp_conv2_fu_198_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => grp_conv2_fu_198_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => grp_conv2_fu_198_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => grp_conv2_fu_198_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => grp_conv2_fu_198_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => grp_conv2_fu_198_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => grp_conv2_fu_198_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => grp_conv2_fu_198_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => gmem_RVALID,
        m_axi_input_V_RREADY => grp_conv2_fu_198_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => gmem_RDATA,
        m_axi_input_V_RLAST => gmem_RLAST,
        m_axi_input_V_RID => gmem_RID,
        m_axi_input_V_RUSER => gmem_RUSER,
        m_axi_input_V_RRESP => gmem_RRESP,
        m_axi_input_V_BVALID => gmem_BVALID,
        m_axi_input_V_BREADY => grp_conv2_fu_198_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => gmem_BRESP,
        m_axi_input_V_BID => gmem_BID,
        m_axi_input_V_BUSER => gmem_BUSER,
        input_V_offset => outputPool_V_read_reg_272,
        outputConv_V_offset => outputConv2_V_read_reg_256,
        weight_V_offset => weight2_V_read_reg_267,
        bias_V_offset => bias2_V_read_reg_262);

    grp_conv1_fu_208 : component conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv1_fu_208_ap_start,
        ap_done => grp_conv1_fu_208_ap_done,
        ap_idle => grp_conv1_fu_208_ap_idle,
        ap_ready => grp_conv1_fu_208_ap_ready,
        m_axi_input_V_AWVALID => grp_conv1_fu_208_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => gmem_AWREADY,
        m_axi_input_V_AWADDR => grp_conv1_fu_208_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => grp_conv1_fu_208_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => grp_conv1_fu_208_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => grp_conv1_fu_208_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => grp_conv1_fu_208_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => grp_conv1_fu_208_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => grp_conv1_fu_208_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => grp_conv1_fu_208_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => grp_conv1_fu_208_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => grp_conv1_fu_208_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => grp_conv1_fu_208_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => grp_conv1_fu_208_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => gmem_WREADY,
        m_axi_input_V_WDATA => grp_conv1_fu_208_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => grp_conv1_fu_208_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => grp_conv1_fu_208_m_axi_input_V_WLAST,
        m_axi_input_V_WID => grp_conv1_fu_208_m_axi_input_V_WID,
        m_axi_input_V_WUSER => grp_conv1_fu_208_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => grp_conv1_fu_208_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => gmem_ARREADY,
        m_axi_input_V_ARADDR => grp_conv1_fu_208_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => grp_conv1_fu_208_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => grp_conv1_fu_208_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => grp_conv1_fu_208_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => grp_conv1_fu_208_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => grp_conv1_fu_208_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => grp_conv1_fu_208_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => grp_conv1_fu_208_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => grp_conv1_fu_208_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => grp_conv1_fu_208_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => grp_conv1_fu_208_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => gmem_RVALID,
        m_axi_input_V_RREADY => grp_conv1_fu_208_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => gmem_RDATA,
        m_axi_input_V_RLAST => gmem_RLAST,
        m_axi_input_V_RID => gmem_RID,
        m_axi_input_V_RUSER => gmem_RUSER,
        m_axi_input_V_RRESP => gmem_RRESP,
        m_axi_input_V_BVALID => gmem_BVALID,
        m_axi_input_V_BREADY => grp_conv1_fu_208_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => gmem_BRESP,
        m_axi_input_V_BID => gmem_BID,
        m_axi_input_V_BUSER => gmem_BUSER,
        input_V_offset => input_V_read_reg_294,
        outputConv_V_offset => outputConv_V_read_reg_288,
        weight_V_offset => weight_V_read_reg_283,
        bias_V_offset => bias_V_read_reg_278);

    grp_pool_fu_218 : component pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool_fu_218_ap_start,
        ap_done => grp_pool_fu_218_ap_done,
        ap_idle => grp_pool_fu_218_ap_idle,
        ap_ready => grp_pool_fu_218_ap_ready,
        m_axi_input_V_AWVALID => grp_pool_fu_218_m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY => gmem_AWREADY,
        m_axi_input_V_AWADDR => grp_pool_fu_218_m_axi_input_V_AWADDR,
        m_axi_input_V_AWID => grp_pool_fu_218_m_axi_input_V_AWID,
        m_axi_input_V_AWLEN => grp_pool_fu_218_m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE => grp_pool_fu_218_m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST => grp_pool_fu_218_m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK => grp_pool_fu_218_m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE => grp_pool_fu_218_m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT => grp_pool_fu_218_m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS => grp_pool_fu_218_m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION => grp_pool_fu_218_m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER => grp_pool_fu_218_m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID => grp_pool_fu_218_m_axi_input_V_WVALID,
        m_axi_input_V_WREADY => gmem_WREADY,
        m_axi_input_V_WDATA => grp_pool_fu_218_m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB => grp_pool_fu_218_m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST => grp_pool_fu_218_m_axi_input_V_WLAST,
        m_axi_input_V_WID => grp_pool_fu_218_m_axi_input_V_WID,
        m_axi_input_V_WUSER => grp_pool_fu_218_m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID => grp_pool_fu_218_m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY => gmem_ARREADY,
        m_axi_input_V_ARADDR => grp_pool_fu_218_m_axi_input_V_ARADDR,
        m_axi_input_V_ARID => grp_pool_fu_218_m_axi_input_V_ARID,
        m_axi_input_V_ARLEN => grp_pool_fu_218_m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE => grp_pool_fu_218_m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST => grp_pool_fu_218_m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK => grp_pool_fu_218_m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE => grp_pool_fu_218_m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT => grp_pool_fu_218_m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS => grp_pool_fu_218_m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION => grp_pool_fu_218_m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER => grp_pool_fu_218_m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID => gmem_RVALID,
        m_axi_input_V_RREADY => grp_pool_fu_218_m_axi_input_V_RREADY,
        m_axi_input_V_RDATA => gmem_RDATA,
        m_axi_input_V_RLAST => gmem_RLAST,
        m_axi_input_V_RID => gmem_RID,
        m_axi_input_V_RUSER => gmem_RUSER,
        m_axi_input_V_RRESP => gmem_RRESP,
        m_axi_input_V_BVALID => gmem_BVALID,
        m_axi_input_V_BREADY => grp_pool_fu_218_m_axi_input_V_BREADY,
        m_axi_input_V_BRESP => gmem_BRESP,
        m_axi_input_V_BID => gmem_BID,
        m_axi_input_V_BUSER => gmem_BUSER,
        input_V_offset => grp_pool_fu_218_input_V_offset,
        outputPool_V_offset => grp_pool_fu_218_outputPool_V_offset,
        Cin => grp_pool_fu_218_Cin,
        H => grp_pool_fu_218_H,
        W => grp_pool_fu_218_W);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv1_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv1_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_conv1_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv1_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_conv1_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv2_fu_198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv2_fu_198_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_conv2_fu_198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2_fu_198_ap_ready = ap_const_logic_1)) then 
                    grp_conv2_fu_198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_fu_188_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dense_fu_188_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_dense_fu_188_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_fu_188_ap_ready = ap_const_logic_1)) then 
                    grp_dense_fu_188_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pool_fu_218_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pool_fu_218_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_pool_fu_218_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool_fu_218_ap_ready = ap_const_logic_1)) then 
                    grp_pool_fu_218_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bias2_V_read_reg_262 <= bias2_V;
                bias_V_read_reg_278 <= bias_V;
                fcBias_V_read_reg_235 <= fcBias_V;
                fcWeight_V_read_reg_240 <= fcWeight_V;
                input_V_read_reg_294 <= input_V;
                outputConv2_V_read_reg_256 <= outputConv2_V;
                outputConv_V_read_reg_288 <= outputConv_V;
                outputDense_V_read_reg_245 <= outputDense_V;
                outputPool2_V_read_reg_250 <= outputPool2_V;
                outputPool_V_read_reg_272 <= outputPool_V;
                weight2_V_read_reg_267 <= weight2_V;
                weight_V_read_reg_283 <= weight_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_dense_fu_188_ap_done, grp_conv2_fu_198_ap_done, grp_conv1_fu_208_ap_done, grp_pool_fu_218_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_conv1_fu_208_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pool_fu_218_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_conv2_fu_198_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_pool_fu_218_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_dense_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_dense_fu_188_ap_done, ap_CS_fsm_state11)
    begin
        if (((grp_dense_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dense_fu_188_ap_done, ap_CS_fsm_state11)
    begin
        if (((grp_dense_fu_188_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_ARADDR_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARADDR, grp_conv2_fu_198_m_axi_input_V_ARADDR, grp_conv1_fu_208_m_axi_input_V_ARADDR, grp_pool_fu_218_m_axi_input_V_ARADDR, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARADDR <= grp_pool_fu_218_m_axi_input_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= grp_conv1_fu_208_m_axi_input_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARADDR <= grp_conv2_fu_198_m_axi_input_V_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARADDR <= grp_dense_fu_188_m_axi_input_V_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARBURST, grp_conv2_fu_198_m_axi_input_V_ARBURST, grp_conv1_fu_208_m_axi_input_V_ARBURST, grp_pool_fu_218_m_axi_input_V_ARBURST, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARBURST <= grp_pool_fu_218_m_axi_input_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARBURST <= grp_conv1_fu_208_m_axi_input_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARBURST <= grp_conv2_fu_198_m_axi_input_V_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARBURST <= grp_dense_fu_188_m_axi_input_V_ARBURST;
        else 
            gmem_ARBURST <= "XX";
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARCACHE, grp_conv2_fu_198_m_axi_input_V_ARCACHE, grp_conv1_fu_208_m_axi_input_V_ARCACHE, grp_pool_fu_218_m_axi_input_V_ARCACHE, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARCACHE <= grp_pool_fu_218_m_axi_input_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARCACHE <= grp_conv1_fu_208_m_axi_input_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARCACHE <= grp_conv2_fu_198_m_axi_input_V_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARCACHE <= grp_dense_fu_188_m_axi_input_V_ARCACHE;
        else 
            gmem_ARCACHE <= "XXXX";
        end if; 
    end process;


    gmem_ARID_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARID, grp_conv2_fu_198_m_axi_input_V_ARID, grp_conv1_fu_208_m_axi_input_V_ARID, grp_pool_fu_218_m_axi_input_V_ARID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARID <= grp_pool_fu_218_m_axi_input_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARID <= grp_conv1_fu_208_m_axi_input_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARID <= grp_conv2_fu_198_m_axi_input_V_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARID <= grp_dense_fu_188_m_axi_input_V_ARID;
        else 
            gmem_ARID <= "X";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARLEN, grp_conv2_fu_198_m_axi_input_V_ARLEN, grp_conv1_fu_208_m_axi_input_V_ARLEN, grp_pool_fu_218_m_axi_input_V_ARLEN, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARLEN <= grp_pool_fu_218_m_axi_input_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= grp_conv1_fu_208_m_axi_input_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARLEN <= grp_conv2_fu_198_m_axi_input_V_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARLEN <= grp_dense_fu_188_m_axi_input_V_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARLOCK, grp_conv2_fu_198_m_axi_input_V_ARLOCK, grp_conv1_fu_208_m_axi_input_V_ARLOCK, grp_pool_fu_218_m_axi_input_V_ARLOCK, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARLOCK <= grp_pool_fu_218_m_axi_input_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLOCK <= grp_conv1_fu_208_m_axi_input_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARLOCK <= grp_conv2_fu_198_m_axi_input_V_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARLOCK <= grp_dense_fu_188_m_axi_input_V_ARLOCK;
        else 
            gmem_ARLOCK <= "XX";
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARPROT, grp_conv2_fu_198_m_axi_input_V_ARPROT, grp_conv1_fu_208_m_axi_input_V_ARPROT, grp_pool_fu_218_m_axi_input_V_ARPROT, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARPROT <= grp_pool_fu_218_m_axi_input_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARPROT <= grp_conv1_fu_208_m_axi_input_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARPROT <= grp_conv2_fu_198_m_axi_input_V_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARPROT <= grp_dense_fu_188_m_axi_input_V_ARPROT;
        else 
            gmem_ARPROT <= "XXX";
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARQOS, grp_conv2_fu_198_m_axi_input_V_ARQOS, grp_conv1_fu_208_m_axi_input_V_ARQOS, grp_pool_fu_218_m_axi_input_V_ARQOS, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARQOS <= grp_pool_fu_218_m_axi_input_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARQOS <= grp_conv1_fu_208_m_axi_input_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARQOS <= grp_conv2_fu_198_m_axi_input_V_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARQOS <= grp_dense_fu_188_m_axi_input_V_ARQOS;
        else 
            gmem_ARQOS <= "XXXX";
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARREGION, grp_conv2_fu_198_m_axi_input_V_ARREGION, grp_conv1_fu_208_m_axi_input_V_ARREGION, grp_pool_fu_218_m_axi_input_V_ARREGION, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARREGION <= grp_pool_fu_218_m_axi_input_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARREGION <= grp_conv1_fu_208_m_axi_input_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARREGION <= grp_conv2_fu_198_m_axi_input_V_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARREGION <= grp_dense_fu_188_m_axi_input_V_ARREGION;
        else 
            gmem_ARREGION <= "XXXX";
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARSIZE, grp_conv2_fu_198_m_axi_input_V_ARSIZE, grp_conv1_fu_208_m_axi_input_V_ARSIZE, grp_pool_fu_218_m_axi_input_V_ARSIZE, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARSIZE <= grp_pool_fu_218_m_axi_input_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARSIZE <= grp_conv1_fu_208_m_axi_input_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARSIZE <= grp_conv2_fu_198_m_axi_input_V_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARSIZE <= grp_dense_fu_188_m_axi_input_V_ARSIZE;
        else 
            gmem_ARSIZE <= "XXX";
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARUSER, grp_conv2_fu_198_m_axi_input_V_ARUSER, grp_conv1_fu_208_m_axi_input_V_ARUSER, grp_pool_fu_218_m_axi_input_V_ARUSER, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARUSER <= grp_pool_fu_218_m_axi_input_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARUSER <= grp_conv1_fu_208_m_axi_input_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARUSER <= grp_conv2_fu_198_m_axi_input_V_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARUSER <= grp_dense_fu_188_m_axi_input_V_ARUSER;
        else 
            gmem_ARUSER <= "X";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(grp_dense_fu_188_m_axi_input_V_ARVALID, grp_conv2_fu_198_m_axi_input_V_ARVALID, grp_conv1_fu_208_m_axi_input_V_ARVALID, grp_pool_fu_218_m_axi_input_V_ARVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_ARVALID <= grp_pool_fu_218_m_axi_input_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= grp_conv1_fu_208_m_axi_input_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_ARVALID <= grp_conv2_fu_198_m_axi_input_V_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_ARVALID <= grp_dense_fu_188_m_axi_input_V_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWADDR, grp_conv2_fu_198_m_axi_input_V_AWADDR, grp_conv1_fu_208_m_axi_input_V_AWADDR, grp_pool_fu_218_m_axi_input_V_AWADDR, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWADDR <= grp_pool_fu_218_m_axi_input_V_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWADDR <= grp_conv1_fu_208_m_axi_input_V_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWADDR <= grp_conv2_fu_198_m_axi_input_V_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWADDR <= grp_dense_fu_188_m_axi_input_V_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWBURST_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWBURST, grp_conv2_fu_198_m_axi_input_V_AWBURST, grp_conv1_fu_208_m_axi_input_V_AWBURST, grp_pool_fu_218_m_axi_input_V_AWBURST, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWBURST <= grp_pool_fu_218_m_axi_input_V_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWBURST <= grp_conv1_fu_208_m_axi_input_V_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWBURST <= grp_conv2_fu_198_m_axi_input_V_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWBURST <= grp_dense_fu_188_m_axi_input_V_AWBURST;
        else 
            gmem_AWBURST <= "XX";
        end if; 
    end process;


    gmem_AWCACHE_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWCACHE, grp_conv2_fu_198_m_axi_input_V_AWCACHE, grp_conv1_fu_208_m_axi_input_V_AWCACHE, grp_pool_fu_218_m_axi_input_V_AWCACHE, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWCACHE <= grp_pool_fu_218_m_axi_input_V_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWCACHE <= grp_conv1_fu_208_m_axi_input_V_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWCACHE <= grp_conv2_fu_198_m_axi_input_V_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWCACHE <= grp_dense_fu_188_m_axi_input_V_AWCACHE;
        else 
            gmem_AWCACHE <= "XXXX";
        end if; 
    end process;


    gmem_AWID_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWID, grp_conv2_fu_198_m_axi_input_V_AWID, grp_conv1_fu_208_m_axi_input_V_AWID, grp_pool_fu_218_m_axi_input_V_AWID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWID <= grp_pool_fu_218_m_axi_input_V_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWID <= grp_conv1_fu_208_m_axi_input_V_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWID <= grp_conv2_fu_198_m_axi_input_V_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWID <= grp_dense_fu_188_m_axi_input_V_AWID;
        else 
            gmem_AWID <= "X";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWLEN, grp_conv2_fu_198_m_axi_input_V_AWLEN, grp_conv1_fu_208_m_axi_input_V_AWLEN, grp_pool_fu_218_m_axi_input_V_AWLEN, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWLEN <= grp_pool_fu_218_m_axi_input_V_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWLEN <= grp_conv1_fu_208_m_axi_input_V_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWLEN <= grp_conv2_fu_198_m_axi_input_V_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWLEN <= grp_dense_fu_188_m_axi_input_V_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLOCK_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWLOCK, grp_conv2_fu_198_m_axi_input_V_AWLOCK, grp_conv1_fu_208_m_axi_input_V_AWLOCK, grp_pool_fu_218_m_axi_input_V_AWLOCK, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWLOCK <= grp_pool_fu_218_m_axi_input_V_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWLOCK <= grp_conv1_fu_208_m_axi_input_V_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWLOCK <= grp_conv2_fu_198_m_axi_input_V_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWLOCK <= grp_dense_fu_188_m_axi_input_V_AWLOCK;
        else 
            gmem_AWLOCK <= "XX";
        end if; 
    end process;


    gmem_AWPROT_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWPROT, grp_conv2_fu_198_m_axi_input_V_AWPROT, grp_conv1_fu_208_m_axi_input_V_AWPROT, grp_pool_fu_218_m_axi_input_V_AWPROT, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWPROT <= grp_pool_fu_218_m_axi_input_V_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWPROT <= grp_conv1_fu_208_m_axi_input_V_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWPROT <= grp_conv2_fu_198_m_axi_input_V_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWPROT <= grp_dense_fu_188_m_axi_input_V_AWPROT;
        else 
            gmem_AWPROT <= "XXX";
        end if; 
    end process;


    gmem_AWQOS_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWQOS, grp_conv2_fu_198_m_axi_input_V_AWQOS, grp_conv1_fu_208_m_axi_input_V_AWQOS, grp_pool_fu_218_m_axi_input_V_AWQOS, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWQOS <= grp_pool_fu_218_m_axi_input_V_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWQOS <= grp_conv1_fu_208_m_axi_input_V_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWQOS <= grp_conv2_fu_198_m_axi_input_V_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWQOS <= grp_dense_fu_188_m_axi_input_V_AWQOS;
        else 
            gmem_AWQOS <= "XXXX";
        end if; 
    end process;


    gmem_AWREGION_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWREGION, grp_conv2_fu_198_m_axi_input_V_AWREGION, grp_conv1_fu_208_m_axi_input_V_AWREGION, grp_pool_fu_218_m_axi_input_V_AWREGION, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWREGION <= grp_pool_fu_218_m_axi_input_V_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWREGION <= grp_conv1_fu_208_m_axi_input_V_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWREGION <= grp_conv2_fu_198_m_axi_input_V_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWREGION <= grp_dense_fu_188_m_axi_input_V_AWREGION;
        else 
            gmem_AWREGION <= "XXXX";
        end if; 
    end process;


    gmem_AWSIZE_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWSIZE, grp_conv2_fu_198_m_axi_input_V_AWSIZE, grp_conv1_fu_208_m_axi_input_V_AWSIZE, grp_pool_fu_218_m_axi_input_V_AWSIZE, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWSIZE <= grp_pool_fu_218_m_axi_input_V_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWSIZE <= grp_conv1_fu_208_m_axi_input_V_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWSIZE <= grp_conv2_fu_198_m_axi_input_V_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWSIZE <= grp_dense_fu_188_m_axi_input_V_AWSIZE;
        else 
            gmem_AWSIZE <= "XXX";
        end if; 
    end process;


    gmem_AWUSER_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWUSER, grp_conv2_fu_198_m_axi_input_V_AWUSER, grp_conv1_fu_208_m_axi_input_V_AWUSER, grp_pool_fu_218_m_axi_input_V_AWUSER, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWUSER <= grp_pool_fu_218_m_axi_input_V_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWUSER <= grp_conv1_fu_208_m_axi_input_V_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWUSER <= grp_conv2_fu_198_m_axi_input_V_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWUSER <= grp_dense_fu_188_m_axi_input_V_AWUSER;
        else 
            gmem_AWUSER <= "X";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(grp_dense_fu_188_m_axi_input_V_AWVALID, grp_conv2_fu_198_m_axi_input_V_AWVALID, grp_conv1_fu_208_m_axi_input_V_AWVALID, grp_pool_fu_218_m_axi_input_V_AWVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_AWVALID <= grp_pool_fu_218_m_axi_input_V_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWVALID <= grp_conv1_fu_208_m_axi_input_V_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_AWVALID <= grp_conv2_fu_198_m_axi_input_V_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_AWVALID <= grp_dense_fu_188_m_axi_input_V_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(grp_dense_fu_188_m_axi_input_V_BREADY, grp_conv2_fu_198_m_axi_input_V_BREADY, grp_conv1_fu_208_m_axi_input_V_BREADY, grp_pool_fu_218_m_axi_input_V_BREADY, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_BREADY <= grp_pool_fu_218_m_axi_input_V_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_BREADY <= grp_conv1_fu_208_m_axi_input_V_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_BREADY <= grp_conv2_fu_198_m_axi_input_V_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_BREADY <= grp_dense_fu_188_m_axi_input_V_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(grp_dense_fu_188_m_axi_input_V_RREADY, grp_conv2_fu_198_m_axi_input_V_RREADY, grp_conv1_fu_208_m_axi_input_V_RREADY, grp_pool_fu_218_m_axi_input_V_RREADY, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_RREADY <= grp_pool_fu_218_m_axi_input_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_RREADY <= grp_conv1_fu_208_m_axi_input_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_RREADY <= grp_conv2_fu_198_m_axi_input_V_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_RREADY <= grp_dense_fu_188_m_axi_input_V_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(grp_dense_fu_188_m_axi_input_V_WDATA, grp_conv2_fu_198_m_axi_input_V_WDATA, grp_conv1_fu_208_m_axi_input_V_WDATA, grp_pool_fu_218_m_axi_input_V_WDATA, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WDATA <= grp_pool_fu_218_m_axi_input_V_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WDATA <= grp_conv1_fu_208_m_axi_input_V_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_WDATA <= grp_conv2_fu_198_m_axi_input_V_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_WDATA <= grp_dense_fu_188_m_axi_input_V_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    gmem_WID_assign_proc : process(grp_dense_fu_188_m_axi_input_V_WID, grp_conv2_fu_198_m_axi_input_V_WID, grp_conv1_fu_208_m_axi_input_V_WID, grp_pool_fu_218_m_axi_input_V_WID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WID <= grp_pool_fu_218_m_axi_input_V_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WID <= grp_conv1_fu_208_m_axi_input_V_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_WID <= grp_conv2_fu_198_m_axi_input_V_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_WID <= grp_dense_fu_188_m_axi_input_V_WID;
        else 
            gmem_WID <= "X";
        end if; 
    end process;


    gmem_WLAST_assign_proc : process(grp_dense_fu_188_m_axi_input_V_WLAST, grp_conv2_fu_198_m_axi_input_V_WLAST, grp_conv1_fu_208_m_axi_input_V_WLAST, grp_pool_fu_218_m_axi_input_V_WLAST, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WLAST <= grp_pool_fu_218_m_axi_input_V_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WLAST <= grp_conv1_fu_208_m_axi_input_V_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_WLAST <= grp_conv2_fu_198_m_axi_input_V_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_WLAST <= grp_dense_fu_188_m_axi_input_V_WLAST;
        else 
            gmem_WLAST <= 'X';
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(grp_dense_fu_188_m_axi_input_V_WSTRB, grp_conv2_fu_198_m_axi_input_V_WSTRB, grp_conv1_fu_208_m_axi_input_V_WSTRB, grp_pool_fu_218_m_axi_input_V_WSTRB, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WSTRB <= grp_pool_fu_218_m_axi_input_V_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WSTRB <= grp_conv1_fu_208_m_axi_input_V_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_WSTRB <= grp_conv2_fu_198_m_axi_input_V_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_WSTRB <= grp_dense_fu_188_m_axi_input_V_WSTRB;
        else 
            gmem_WSTRB <= "X";
        end if; 
    end process;


    gmem_WUSER_assign_proc : process(grp_dense_fu_188_m_axi_input_V_WUSER, grp_conv2_fu_198_m_axi_input_V_WUSER, grp_conv1_fu_208_m_axi_input_V_WUSER, grp_pool_fu_218_m_axi_input_V_WUSER, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WUSER <= grp_pool_fu_218_m_axi_input_V_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WUSER <= grp_conv1_fu_208_m_axi_input_V_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_WUSER <= grp_conv2_fu_198_m_axi_input_V_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_WUSER <= grp_dense_fu_188_m_axi_input_V_WUSER;
        else 
            gmem_WUSER <= "X";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(grp_dense_fu_188_m_axi_input_V_WVALID, grp_conv2_fu_198_m_axi_input_V_WVALID, grp_conv1_fu_208_m_axi_input_V_WVALID, grp_pool_fu_218_m_axi_input_V_WVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            gmem_WVALID <= grp_pool_fu_218_m_axi_input_V_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WVALID <= grp_conv1_fu_208_m_axi_input_V_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem_WVALID <= grp_conv2_fu_198_m_axi_input_V_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gmem_WVALID <= grp_dense_fu_188_m_axi_input_V_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv1_fu_208_ap_start <= grp_conv1_fu_208_ap_start_reg;
    grp_conv2_fu_198_ap_start <= grp_conv2_fu_198_ap_start_reg;
    grp_dense_fu_188_ap_start <= grp_dense_fu_188_ap_start_reg;

    grp_pool_fu_218_Cin_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_pool_fu_218_Cin <= ap_const_lv6_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_pool_fu_218_Cin <= ap_const_lv6_8;
        else 
            grp_pool_fu_218_Cin <= "XXXXXX";
        end if; 
    end process;


    grp_pool_fu_218_H_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_pool_fu_218_H <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_pool_fu_218_H <= ap_const_lv6_1C;
        else 
            grp_pool_fu_218_H <= "XXXXXX";
        end if; 
    end process;


    grp_pool_fu_218_W_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_pool_fu_218_W <= ap_const_lv6_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_pool_fu_218_W <= ap_const_lv6_1C;
        else 
            grp_pool_fu_218_W <= "XXXXXX";
        end if; 
    end process;

    grp_pool_fu_218_ap_start <= grp_pool_fu_218_ap_start_reg;

    grp_pool_fu_218_input_V_offset_assign_proc : process(outputConv2_V_read_reg_256, outputConv_V_read_reg_288, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_pool_fu_218_input_V_offset <= outputConv2_V_read_reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_pool_fu_218_input_V_offset <= outputConv_V_read_reg_288;
        else 
            grp_pool_fu_218_input_V_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pool_fu_218_outputPool_V_offset_assign_proc : process(outputPool2_V_read_reg_250, outputPool_V_read_reg_272, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_pool_fu_218_outputPool_V_offset <= outputPool2_V_read_reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_pool_fu_218_outputPool_V_offset <= outputPool_V_read_reg_272;
        else 
            grp_pool_fu_218_outputPool_V_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

end behav;
