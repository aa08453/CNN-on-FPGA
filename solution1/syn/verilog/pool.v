// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_V_AWVALID,
        m_axi_input_V_AWREADY,
        m_axi_input_V_AWADDR,
        m_axi_input_V_AWID,
        m_axi_input_V_AWLEN,
        m_axi_input_V_AWSIZE,
        m_axi_input_V_AWBURST,
        m_axi_input_V_AWLOCK,
        m_axi_input_V_AWCACHE,
        m_axi_input_V_AWPROT,
        m_axi_input_V_AWQOS,
        m_axi_input_V_AWREGION,
        m_axi_input_V_AWUSER,
        m_axi_input_V_WVALID,
        m_axi_input_V_WREADY,
        m_axi_input_V_WDATA,
        m_axi_input_V_WSTRB,
        m_axi_input_V_WLAST,
        m_axi_input_V_WID,
        m_axi_input_V_WUSER,
        m_axi_input_V_ARVALID,
        m_axi_input_V_ARREADY,
        m_axi_input_V_ARADDR,
        m_axi_input_V_ARID,
        m_axi_input_V_ARLEN,
        m_axi_input_V_ARSIZE,
        m_axi_input_V_ARBURST,
        m_axi_input_V_ARLOCK,
        m_axi_input_V_ARCACHE,
        m_axi_input_V_ARPROT,
        m_axi_input_V_ARQOS,
        m_axi_input_V_ARREGION,
        m_axi_input_V_ARUSER,
        m_axi_input_V_RVALID,
        m_axi_input_V_RREADY,
        m_axi_input_V_RDATA,
        m_axi_input_V_RLAST,
        m_axi_input_V_RID,
        m_axi_input_V_RUSER,
        m_axi_input_V_RRESP,
        m_axi_input_V_BVALID,
        m_axi_input_V_BREADY,
        m_axi_input_V_BRESP,
        m_axi_input_V_BID,
        m_axi_input_V_BUSER,
        input_V_offset,
        outputPool_V_offset,
        Cin,
        H,
        W
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_V_AWVALID;
input   m_axi_input_V_AWREADY;
output  [31:0] m_axi_input_V_AWADDR;
output  [0:0] m_axi_input_V_AWID;
output  [31:0] m_axi_input_V_AWLEN;
output  [2:0] m_axi_input_V_AWSIZE;
output  [1:0] m_axi_input_V_AWBURST;
output  [1:0] m_axi_input_V_AWLOCK;
output  [3:0] m_axi_input_V_AWCACHE;
output  [2:0] m_axi_input_V_AWPROT;
output  [3:0] m_axi_input_V_AWQOS;
output  [3:0] m_axi_input_V_AWREGION;
output  [0:0] m_axi_input_V_AWUSER;
output   m_axi_input_V_WVALID;
input   m_axi_input_V_WREADY;
output  [7:0] m_axi_input_V_WDATA;
output  [0:0] m_axi_input_V_WSTRB;
output   m_axi_input_V_WLAST;
output  [0:0] m_axi_input_V_WID;
output  [0:0] m_axi_input_V_WUSER;
output   m_axi_input_V_ARVALID;
input   m_axi_input_V_ARREADY;
output  [31:0] m_axi_input_V_ARADDR;
output  [0:0] m_axi_input_V_ARID;
output  [31:0] m_axi_input_V_ARLEN;
output  [2:0] m_axi_input_V_ARSIZE;
output  [1:0] m_axi_input_V_ARBURST;
output  [1:0] m_axi_input_V_ARLOCK;
output  [3:0] m_axi_input_V_ARCACHE;
output  [2:0] m_axi_input_V_ARPROT;
output  [3:0] m_axi_input_V_ARQOS;
output  [3:0] m_axi_input_V_ARREGION;
output  [0:0] m_axi_input_V_ARUSER;
input   m_axi_input_V_RVALID;
output   m_axi_input_V_RREADY;
input  [7:0] m_axi_input_V_RDATA;
input   m_axi_input_V_RLAST;
input  [0:0] m_axi_input_V_RID;
input  [0:0] m_axi_input_V_RUSER;
input  [1:0] m_axi_input_V_RRESP;
input   m_axi_input_V_BVALID;
output   m_axi_input_V_BREADY;
input  [1:0] m_axi_input_V_BRESP;
input  [0:0] m_axi_input_V_BID;
input  [0:0] m_axi_input_V_BUSER;
input  [31:0] input_V_offset;
input  [31:0] outputPool_V_offset;
input  [5:0] Cin;
input  [5:0] H;
input  [5:0] W;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_V_AWVALID;
reg m_axi_input_V_WVALID;
reg m_axi_input_V_ARVALID;
reg[31:0] m_axi_input_V_ARADDR;
reg m_axi_input_V_RREADY;
reg m_axi_input_V_BREADY;

(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_V_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    input_V_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
reg    input_V_blk_n_AW;
reg    input_V_blk_n_W;
wire    ap_CS_fsm_state43;
reg    input_V_blk_n_B;
wire    ap_CS_fsm_state48;
wire   [3:0] Hout_fu_275_p2;
reg   [3:0] Hout_reg_669;
wire   [7:0] zext_ln15_fu_281_p1;
reg   [7:0] zext_ln15_reg_674;
wire   [3:0] Wout_fu_305_p2;
reg   [3:0] Wout_reg_679;
wire   [11:0] zext_ln12_fu_311_p1;
reg   [11:0] zext_ln12_reg_684;
wire   [8:0] zext_ln17_fu_315_p1;
reg   [8:0] zext_ln17_reg_689;
wire   [13:0] zext_ln17_1_fu_319_p1;
reg   [13:0] zext_ln17_1_reg_694;
wire  signed [32:0] sext_ln17_fu_323_p1;
reg  signed [32:0] sext_ln17_reg_700;
wire  signed [32:0] sext_ln14_fu_327_p1;
reg  signed [32:0] sext_ln14_reg_705;
wire   [8:0] add_ln15_fu_331_p2;
reg   [8:0] add_ln15_reg_716;
wire    ap_CS_fsm_state2;
wire   [4:0] co_fu_349_p2;
reg   [4:0] co_reg_724;
wire   [7:0] mul_ln15_fu_355_p2;
reg   [7:0] mul_ln15_reg_729;
wire   [0:0] icmp_ln14_fu_344_p2;
wire   [3:0] h_fu_369_p2;
reg   [3:0] h_reg_737;
wire    ap_CS_fsm_state3;
wire   [13:0] mul_ln17_fu_397_p2;
reg   [13:0] mul_ln17_reg_742;
wire   [0:0] icmp_ln15_fu_364_p2;
wire   [11:0] mul_ln32_fu_411_p2;
reg   [11:0] mul_ln32_reg_747;
wire   [13:0] mul_ln27_fu_426_p2;
reg   [13:0] mul_ln27_reg_752;
wire   [3:0] w_fu_440_p2;
reg   [3:0] w_reg_760;
wire    ap_CS_fsm_state4;
wire   [13:0] add_ln17_1_fu_458_p2;
reg   [13:0] add_ln17_1_reg_765;
wire   [0:0] icmp_ln16_fu_435_p2;
reg   [31:0] outputPool_V_addr_reg_771;
wire   [13:0] add_ln27_2_fu_482_p2;
reg   [13:0] add_ln27_2_reg_777;
reg   [31:0] outputPool_V_addr26_reg_784;
wire   [13:0] add_ln27_fu_511_p2;
reg   [13:0] add_ln27_reg_790;
reg   [31:0] outputPool_V_addr_1_reg_795;
reg   [7:0] max_V_reg_801;
reg   [7:0] outputPool_V_addr_1_s_reg_806;
wire   [13:0] select_ln28_fu_539_p3;
reg   [13:0] select_ln28_reg_811;
wire    ap_CS_fsm_state14;
reg   [31:0] outputPool_V_addr_2_reg_816;
reg   [31:0] outputPool_V_addr_3_reg_822;
reg   [7:0] max_V_1_reg_828;
reg   [7:0] outputPool_V_addr_3_s_reg_833;
wire   [13:0] select_ln28_1_fu_586_p3;
reg   [13:0] select_ln28_1_reg_838;
wire    ap_CS_fsm_state24;
reg   [31:0] outputPool_V_addr_4_reg_843;
wire   [13:0] add_ln27_3_fu_611_p2;
reg   [13:0] add_ln27_3_reg_849;
reg   [31:0] outputPool_V_addr_5_reg_854;
reg   [7:0] max_V_2_reg_860;
reg   [7:0] outputPool_V_addr_5_s_reg_865;
reg   [31:0] outputPool_V_addr_6_reg_870;
wire    ap_CS_fsm_state34;
reg   [7:0] max_V_3_reg_876;
reg   [4:0] co_0_reg_210;
reg   [8:0] phi_mul_reg_221;
reg   [3:0] h_0_reg_233;
reg   [3:0] w_0_reg_244;
wire  signed [63:0] sext_ln17_1_fu_472_p1;
wire  signed [63:0] sext_ln203_fu_501_p1;
wire  signed [63:0] sext_ln1494_fu_525_p1;
wire  signed [63:0] sext_ln1494_1_fu_554_p1;
wire  signed [63:0] sext_ln1494_2_fu_572_p1;
wire  signed [63:0] sext_ln1494_3_fu_601_p1;
wire  signed [63:0] sext_ln1494_4_fu_625_p1;
wire  signed [63:0] sext_ln1494_5_fu_654_p1;
wire   [4:0] trunc_ln11_fu_255_p1;
wire   [4:0] add_ln11_fu_259_p2;
wire   [3:0] trunc_ln11_1_fu_265_p4;
wire   [4:0] trunc_ln12_fu_285_p1;
wire   [4:0] add_ln12_fu_289_p2;
wire   [3:0] trunc_ln12_1_fu_295_p4;
wire   [5:0] zext_ln14_fu_340_p1;
wire   [3:0] mul_ln15_fu_355_p0;
wire   [4:0] mul_ln15_fu_355_p1;
wire   [4:0] shl_ln_fu_375_p3;
wire   [8:0] zext_ln17_2_fu_383_p1;
wire   [8:0] in_h_fu_387_p2;
wire   [8:0] mul_ln17_fu_397_p0;
wire   [5:0] mul_ln17_fu_397_p1;
wire   [7:0] zext_ln15_2_fu_360_p1;
wire   [7:0] add_ln32_fu_402_p2;
wire   [7:0] mul_ln32_fu_411_p0;
wire   [3:0] mul_ln32_fu_411_p1;
wire   [8:0] add_ln27_1_fu_416_p2;
wire   [8:0] mul_ln27_fu_426_p0;
wire   [5:0] mul_ln27_fu_426_p1;
wire   [4:0] shl_ln17_1_fu_446_p3;
wire   [13:0] zext_ln17_4_fu_454_p1;
wire   [32:0] zext_ln17_5_fu_463_p1;
wire   [32:0] add_ln17_2_fu_467_p2;
wire   [11:0] zext_ln16_fu_431_p1;
wire   [11:0] outIdx_fu_487_p2;
wire   [32:0] zext_ln203_fu_492_p1;
wire   [32:0] add_ln203_fu_496_p2;
wire   [32:0] zext_ln1494_fu_516_p1;
wire   [32:0] add_ln1494_fu_520_p2;
wire   [0:0] icmp_ln1494_fu_535_p2;
wire   [32:0] zext_ln1494_1_fu_545_p1;
wire   [32:0] add_ln1494_1_fu_549_p2;
wire   [32:0] zext_ln1494_2_fu_564_p1;
wire   [32:0] add_ln1494_2_fu_567_p2;
wire   [0:0] icmp_ln1494_1_fu_582_p2;
wire   [32:0] zext_ln1494_3_fu_592_p1;
wire   [32:0] add_ln1494_3_fu_596_p2;
wire   [32:0] zext_ln1494_4_fu_616_p1;
wire   [32:0] add_ln1494_4_fu_620_p2;
wire   [0:0] icmp_ln1494_2_fu_635_p2;
wire   [13:0] select_ln28_2_fu_639_p3;
wire   [32:0] zext_ln1494_5_fu_645_p1;
wire   [32:0] add_ln1494_5_fu_649_p2;
reg   [47:0] ap_NS_fsm;
wire   [7:0] mul_ln15_fu_355_p10;
wire   [13:0] mul_ln17_fu_397_p00;
wire   [13:0] mul_ln27_fu_426_p00;
wire   [11:0] mul_ln32_fu_411_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        co_0_reg_210 <= co_reg_724;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_0_reg_210 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        h_0_reg_233 <= h_reg_737;
    end else if (((icmp_ln14_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        h_0_reg_233 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_221 <= add_ln15_reg_716;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_221 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_0_reg_244 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state48) & (m_axi_input_V_BVALID == 1'b1))) begin
        w_0_reg_244 <= w_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        Hout_reg_669 <= Hout_fu_275_p2;
        Wout_reg_679 <= Wout_fu_305_p2;
        sext_ln14_reg_705 <= sext_ln14_fu_327_p1;
        sext_ln17_reg_700 <= sext_ln17_fu_323_p1;
        zext_ln12_reg_684[3 : 0] <= zext_ln12_fu_311_p1[3 : 0];
        zext_ln15_reg_674[3 : 0] <= zext_ln15_fu_281_p1[3 : 0];
        zext_ln17_1_reg_694[5 : 0] <= zext_ln17_1_fu_319_p1[5 : 0];
        zext_ln17_reg_689[5 : 0] <= zext_ln17_fu_315_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln15_reg_716 <= add_ln15_fu_331_p2;
        co_reg_724 <= co_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_435_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln17_1_reg_765 <= add_ln17_1_fu_458_p2;
        add_ln27_2_reg_777 <= add_ln27_2_fu_482_p2;
        outputPool_V_addr26_reg_784 <= sext_ln203_fu_501_p1;
        outputPool_V_addr_reg_771 <= sext_ln17_1_fu_472_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        add_ln27_3_reg_849 <= add_ln27_3_fu_611_p2;
        outputPool_V_addr_5_reg_854 <= sext_ln1494_4_fu_625_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln27_reg_790 <= add_ln27_fu_511_p2;
        outputPool_V_addr_1_reg_795 <= sext_ln1494_fu_525_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_737 <= h_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (m_axi_input_V_RVALID == 1'b1))) begin
        max_V_1_reg_828 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (m_axi_input_V_RVALID == 1'b1))) begin
        max_V_2_reg_860 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (m_axi_input_V_RVALID == 1'b1))) begin
        max_V_3_reg_876 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_input_V_AWREADY == 1'b0) | (m_axi_input_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        max_V_reg_801 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln15_reg_729 <= mul_ln15_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln17_reg_742 <= mul_ln17_fu_397_p2;
        mul_ln27_reg_752 <= mul_ln27_fu_426_p2;
        mul_ln32_reg_747 <= mul_ln32_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_input_V_RVALID == 1'b1))) begin
        outputPool_V_addr_1_s_reg_806 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outputPool_V_addr_2_reg_816 <= sext_ln1494_1_fu_554_p1;
        select_ln28_reg_811 <= select_ln28_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        outputPool_V_addr_3_reg_822 <= sext_ln1494_2_fu_572_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (m_axi_input_V_RVALID == 1'b1))) begin
        outputPool_V_addr_3_s_reg_833 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        outputPool_V_addr_4_reg_843 <= sext_ln1494_3_fu_601_p1;
        select_ln28_1_reg_838 <= select_ln28_1_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (m_axi_input_V_RVALID == 1'b1))) begin
        outputPool_V_addr_5_s_reg_865 <= m_axi_input_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        outputPool_V_addr_6_reg_870 <= sext_ln1494_5_fu_654_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_reg_760 <= w_fu_440_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln14_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        input_V_blk_n_AR = m_axi_input_V_ARREADY;
    end else begin
        input_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_V_blk_n_AW = m_axi_input_V_AWREADY;
    end else begin
        input_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        input_V_blk_n_B = m_axi_input_V_BVALID;
    end else begin
        input_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        input_V_blk_n_R = m_axi_input_V_RVALID;
    end else begin
        input_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        input_V_blk_n_W = m_axi_input_V_WREADY;
    end else begin
        input_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((m_axi_input_V_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_6_reg_870;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_5_reg_854;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_4_reg_843;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_3_reg_822;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_2_reg_816;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_1_reg_795;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_input_V_ARADDR = outputPool_V_addr_reg_771;
        end else begin
            m_axi_input_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_input_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_input_V_ARVALID = 1'b1;
    end else begin
        m_axi_input_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_input_V_AWREADY == 1'b0) | (m_axi_input_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_input_V_AWVALID = 1'b1;
    end else begin
        m_axi_input_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (m_axi_input_V_BVALID == 1'b1))) begin
        m_axi_input_V_BREADY = 1'b1;
    end else begin
        m_axi_input_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state42) & (m_axi_input_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (m_axi_input_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (m_axi_input_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (m_axi_input_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (m_axi_input_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (m_axi_input_V_RVALID == 1'b1)) | (~((m_axi_input_V_AWREADY == 1'b0) | (m_axi_input_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        m_axi_input_V_RREADY = 1'b1;
    end else begin
        m_axi_input_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_input_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        m_axi_input_V_WVALID = 1'b1;
    end else begin
        m_axi_input_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln15_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_435_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((m_axi_input_V_AWREADY == 1'b0) | (m_axi_input_V_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (m_axi_input_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (m_axi_input_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (m_axi_input_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (m_axi_input_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (m_axi_input_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((m_axi_input_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (m_axi_input_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((m_axi_input_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (m_axi_input_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hout_fu_275_p2 = (4'd1 + trunc_ln11_1_fu_265_p4);

assign Wout_fu_305_p2 = (4'd1 + trunc_ln12_1_fu_295_p4);

assign add_ln11_fu_259_p2 = ($signed(5'd30) + $signed(trunc_ln11_fu_255_p1));

assign add_ln12_fu_289_p2 = ($signed(5'd30) + $signed(trunc_ln12_fu_285_p1));

assign add_ln1494_1_fu_549_p2 = ($signed(zext_ln1494_1_fu_545_p1) + $signed(sext_ln14_reg_705));

assign add_ln1494_2_fu_567_p2 = ($signed(zext_ln1494_2_fu_564_p1) + $signed(sext_ln14_reg_705));

assign add_ln1494_3_fu_596_p2 = ($signed(zext_ln1494_3_fu_592_p1) + $signed(sext_ln14_reg_705));

assign add_ln1494_4_fu_620_p2 = ($signed(zext_ln1494_4_fu_616_p1) + $signed(sext_ln14_reg_705));

assign add_ln1494_5_fu_649_p2 = ($signed(zext_ln1494_5_fu_645_p1) + $signed(sext_ln14_reg_705));

assign add_ln1494_fu_520_p2 = ($signed(zext_ln1494_fu_516_p1) + $signed(sext_ln14_reg_705));

assign add_ln15_fu_331_p2 = (phi_mul_reg_221 + zext_ln17_reg_689);

assign add_ln17_1_fu_458_p2 = (zext_ln17_4_fu_454_p1 + mul_ln17_reg_742);

assign add_ln17_2_fu_467_p2 = ($signed(zext_ln17_5_fu_463_p1) + $signed(sext_ln14_reg_705));

assign add_ln203_fu_496_p2 = ($signed(zext_ln203_fu_492_p1) + $signed(sext_ln17_reg_700));

assign add_ln27_1_fu_416_p2 = (in_h_fu_387_p2 + 9'd1);

assign add_ln27_2_fu_482_p2 = (mul_ln27_reg_752 + zext_ln17_4_fu_454_p1);

assign add_ln27_3_fu_611_p2 = (add_ln27_2_reg_777 + 14'd1);

assign add_ln27_fu_511_p2 = (add_ln17_1_reg_765 + 14'd1);

assign add_ln32_fu_402_p2 = (zext_ln15_2_fu_360_p1 + mul_ln15_reg_729);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign co_fu_349_p2 = (co_0_reg_210 + 5'd1);

assign h_fu_369_p2 = (h_0_reg_233 + 4'd1);

assign icmp_ln1494_1_fu_582_p2 = (($signed(outputPool_V_addr_3_s_reg_833) > $signed(max_V_1_reg_828)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_635_p2 = (($signed(outputPool_V_addr_5_s_reg_865) > $signed(max_V_2_reg_860)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_535_p2 = (($signed(outputPool_V_addr_1_s_reg_806) > $signed(max_V_reg_801)) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_344_p2 = (($signed(zext_ln14_fu_340_p1) < $signed(Cin)) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_364_p2 = ((h_0_reg_233 == Hout_reg_669) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_435_p2 = ((w_0_reg_244 == Wout_reg_679) ? 1'b1 : 1'b0);

assign in_h_fu_387_p2 = (zext_ln17_2_fu_383_p1 + phi_mul_reg_221);

assign m_axi_input_V_ARBURST = 2'd0;

assign m_axi_input_V_ARCACHE = 4'd0;

assign m_axi_input_V_ARID = 1'd0;

assign m_axi_input_V_ARLEN = 32'd1;

assign m_axi_input_V_ARLOCK = 2'd0;

assign m_axi_input_V_ARPROT = 3'd0;

assign m_axi_input_V_ARQOS = 4'd0;

assign m_axi_input_V_ARREGION = 4'd0;

assign m_axi_input_V_ARSIZE = 3'd0;

assign m_axi_input_V_ARUSER = 1'd0;

assign m_axi_input_V_AWADDR = outputPool_V_addr26_reg_784;

assign m_axi_input_V_AWBURST = 2'd0;

assign m_axi_input_V_AWCACHE = 4'd0;

assign m_axi_input_V_AWID = 1'd0;

assign m_axi_input_V_AWLEN = 32'd1;

assign m_axi_input_V_AWLOCK = 2'd0;

assign m_axi_input_V_AWPROT = 3'd0;

assign m_axi_input_V_AWQOS = 4'd0;

assign m_axi_input_V_AWREGION = 4'd0;

assign m_axi_input_V_AWSIZE = 3'd0;

assign m_axi_input_V_AWUSER = 1'd0;

assign m_axi_input_V_WDATA = max_V_3_reg_876;

assign m_axi_input_V_WID = 1'd0;

assign m_axi_input_V_WLAST = 1'b0;

assign m_axi_input_V_WSTRB = 1'd1;

assign m_axi_input_V_WUSER = 1'd0;

assign mul_ln15_fu_355_p0 = zext_ln15_reg_674;

assign mul_ln15_fu_355_p1 = mul_ln15_fu_355_p10;

assign mul_ln15_fu_355_p10 = co_0_reg_210;

assign mul_ln15_fu_355_p2 = (mul_ln15_fu_355_p0 * mul_ln15_fu_355_p1);

assign mul_ln17_fu_397_p0 = mul_ln17_fu_397_p00;

assign mul_ln17_fu_397_p00 = in_h_fu_387_p2;

assign mul_ln17_fu_397_p1 = zext_ln17_1_reg_694;

assign mul_ln17_fu_397_p2 = (mul_ln17_fu_397_p0 * mul_ln17_fu_397_p1);

assign mul_ln27_fu_426_p0 = mul_ln27_fu_426_p00;

assign mul_ln27_fu_426_p00 = add_ln27_1_fu_416_p2;

assign mul_ln27_fu_426_p1 = zext_ln17_1_reg_694;

assign mul_ln27_fu_426_p2 = (mul_ln27_fu_426_p0 * mul_ln27_fu_426_p1);

assign mul_ln32_fu_411_p0 = mul_ln32_fu_411_p00;

assign mul_ln32_fu_411_p00 = add_ln32_fu_402_p2;

assign mul_ln32_fu_411_p1 = zext_ln12_reg_684;

assign mul_ln32_fu_411_p2 = (mul_ln32_fu_411_p0 * mul_ln32_fu_411_p1);

assign outIdx_fu_487_p2 = (zext_ln16_fu_431_p1 + mul_ln32_reg_747);

assign select_ln28_1_fu_586_p3 = ((icmp_ln1494_1_fu_582_p2[0:0] === 1'b1) ? add_ln27_2_reg_777 : select_ln28_reg_811);

assign select_ln28_2_fu_639_p3 = ((icmp_ln1494_2_fu_635_p2[0:0] === 1'b1) ? add_ln27_3_reg_849 : select_ln28_1_reg_838);

assign select_ln28_fu_539_p3 = ((icmp_ln1494_fu_535_p2[0:0] === 1'b1) ? add_ln27_reg_790 : add_ln17_1_reg_765);

assign sext_ln1494_1_fu_554_p1 = $signed(add_ln1494_1_fu_549_p2);

assign sext_ln1494_2_fu_572_p1 = $signed(add_ln1494_2_fu_567_p2);

assign sext_ln1494_3_fu_601_p1 = $signed(add_ln1494_3_fu_596_p2);

assign sext_ln1494_4_fu_625_p1 = $signed(add_ln1494_4_fu_620_p2);

assign sext_ln1494_5_fu_654_p1 = $signed(add_ln1494_5_fu_649_p2);

assign sext_ln1494_fu_525_p1 = $signed(add_ln1494_fu_520_p2);

assign sext_ln14_fu_327_p1 = $signed(input_V_offset);

assign sext_ln17_1_fu_472_p1 = $signed(add_ln17_2_fu_467_p2);

assign sext_ln17_fu_323_p1 = $signed(outputPool_V_offset);

assign sext_ln203_fu_501_p1 = $signed(add_ln203_fu_496_p2);

assign shl_ln17_1_fu_446_p3 = {{w_0_reg_244}, {1'd0}};

assign shl_ln_fu_375_p3 = {{h_0_reg_233}, {1'd0}};

assign trunc_ln11_1_fu_265_p4 = {{add_ln11_fu_259_p2[4:1]}};

assign trunc_ln11_fu_255_p1 = H[4:0];

assign trunc_ln12_1_fu_295_p4 = {{add_ln12_fu_289_p2[4:1]}};

assign trunc_ln12_fu_285_p1 = W[4:0];

assign w_fu_440_p2 = (w_0_reg_244 + 4'd1);

assign zext_ln12_fu_311_p1 = Wout_fu_305_p2;

assign zext_ln1494_1_fu_545_p1 = select_ln28_fu_539_p3;

assign zext_ln1494_2_fu_564_p1 = add_ln27_2_reg_777;

assign zext_ln1494_3_fu_592_p1 = select_ln28_1_fu_586_p3;

assign zext_ln1494_4_fu_616_p1 = add_ln27_3_fu_611_p2;

assign zext_ln1494_5_fu_645_p1 = select_ln28_2_fu_639_p3;

assign zext_ln1494_fu_516_p1 = add_ln27_fu_511_p2;

assign zext_ln14_fu_340_p1 = co_0_reg_210;

assign zext_ln15_2_fu_360_p1 = h_0_reg_233;

assign zext_ln15_fu_281_p1 = Hout_fu_275_p2;

assign zext_ln16_fu_431_p1 = w_0_reg_244;

assign zext_ln17_1_fu_319_p1 = W;

assign zext_ln17_2_fu_383_p1 = shl_ln_fu_375_p3;

assign zext_ln17_4_fu_454_p1 = shl_ln17_1_fu_446_p3;

assign zext_ln17_5_fu_463_p1 = add_ln17_1_fu_458_p2;

assign zext_ln17_fu_315_p1 = H;

assign zext_ln203_fu_492_p1 = outIdx_fu_487_p2;

always @ (posedge ap_clk) begin
    zext_ln15_reg_674[7:4] <= 4'b0000;
    zext_ln12_reg_684[11:4] <= 8'b00000000;
    zext_ln17_reg_689[8:6] <= 3'b000;
    zext_ln17_1_reg_694[13:6] <= 8'b00000000;
end

endmodule //pool
